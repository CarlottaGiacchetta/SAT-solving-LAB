(set-option :produce-models true)

;Mary
(declare-const M1 Int)
(declare-const M2 Int)
(declare-const M3 Int)
(declare-const M4 Int)
(declare-const M5 Int)
(declare-const M6 Int)
(declare-const M7 Int)
(declare-const M8 Int)
(declare-const M9 Int)
(declare-const M10 Int)

;Dan
(declare-const D1 Int)
(declare-const D2 Int)
(declare-const D3 Int)
(declare-const D4 Int)
(declare-const D5 Int)
(declare-const D6 Int)
(declare-const D7 Int)
(declare-const D8 Int)
(declare-const D9 Int)
(declare-const D10 Int)

;Lisa
(declare-const L1 Int)
(declare-const L2 Int)
(declare-const L3 Int)
(declare-const L4 Int)
(declare-const L5 Int)
(declare-const L6 Int)
(declare-const L7 Int)
(declare-const L8 Int)
(declare-const L9 Int)
(declare-const L10 Int)

;Jhon
;Dan
(declare-const J1 Int)
(declare-const J2 Int)
(declare-const J3 Int)
(declare-const J4 Int)
(declare-const J5 Int)
(declare-const J6 Int)
(declare-const J7 Int)
(declare-const J8 Int)
(declare-const J9 Int)
(declare-const J10 Int)

(declare-const score Int)



(assert (or (= M1 10) (= M1 0)))
(assert (or (= M2 10) (= M2 0)))
(assert (or (= M3 10) (= M3 0)))
(assert (or (= M4 10) (= M4 0)))
(assert (or (= M5 10) (= M5 0)))
(assert (or (= M6 10) (= M6 0)))
(assert (or (= M7 10) (= M7 0)))
(assert (or (= M8 10) (= M8 0)))
(assert (or (= M9 10) (= M9 0)))
(assert (or (= M10 10) (= M10 0)))

(assert (or (= D1 10) (= D1 0)))
(assert (or (= D2 10) (= D2 0)))
(assert (or (= D3 10) (= D3 0)))
(assert (or (= D4 10) (= D4 0)))
(assert (or (= D5 10) (= D5 0)))
(assert (or (= D6 10) (= D6 0)))
(assert (or (= D7 10) (= D7 0)))
(assert (or (= D8 10) (= D8 0)))
(assert (or (= D9 10) (= D9 0)))
(assert (or (= D10 10) (= D10 0)))

(assert (or (= J1 10) (= J1 0)))
(assert (or (= J2 10) (= J2 0)))
(assert (or (= J3 10) (= J3 0)))
(assert (or (= J4 10) (= J4 0)))
(assert (or (= J5 10) (= J5 0)))
(assert (or (= J6 10) (= J6 0)))
(assert (or (= J7 10) (= J7 0)))
(assert (or (= J8 10) (= J8 0)))
(assert (or (= J9 10) (= J9 0)))
(assert (or (= J10 10) (= J10 0)))

(assert (= M1 D1 L1 J1 ))
(assert (= M2 J2))
(assert (= L2 D2))
(assert (distinct M2 L2 ))
(assert (= M3 D3 L3 J3 ))
(assert (= D4 L4 J4 ))
(assert (distinct M4 D4 ))
(assert (= M5 J5))
(assert (= D5 L5))
(assert (distinct M5 D5 ))
(assert (= M6 L6 J6))
(assert (distinct M6 D6))
(assert (= M7 D7 L7 J7 ))
(assert (= M8 D8 L8 J8 ))
(assert (= M9 L9 ))
(assert (= D9 J9 ))
(assert (distinct M9 D9))
(assert (= D10 J10 L10))
(assert (distinct D10 M10))

(assert(= 70 (+ M1 M2 M3 M4 M5 M6 M7 M8 M9 M10)))
(assert(= 50 (+ D1 D2 D3 D4 D5 D6 D7 D8 D9 D10)))
(assert(= 30 (+ L1 L2 L3 L4 L5 L6 L7 L8 L9 L10)))

(assert(= score (+ J1 J2 J3 J4 J5 J6 J7 J8 J9 J10)))

(assert (or (not (= J1 10)) (not (= J2 10)) (not (= J3 10)) (not (= J4 0)) (not (= J5 10)) (not (= J6 0)) (not (= J7 10)) (not (= J8 0)) (not (= J9 10)) (not (= J10 0))))
(assert (or (not (= J1 10)) (not (= J2 10)) (not (= J3 0)) (not (= J4 0)) (not (= J5 10)) (not (= J6 0)) (not (= J7 10)) (not (= J8 10)) (not (= J9 10)) (not (= J10 0))))
(assert (or (not (= J1 0)) (not (= J2 10)) (not (= J3 10)) (not (= J4 0)) (not (= J5 10)) (not (= J6 0)) (not (= J7 10)) (not (= J8 10)) (not (= J9 10)) (not (= J10 0))))
(assert (or (not (= J1 10)) (not (= J2 10)) (not (= J3 10)) (not (= J4 0)) (not (= J5 10)) (not (= J6 0)) (not (= J7 0)) (not (= J8 10)) (not (= J9 10)) (not (= J10 0))))



(check-sat)
(get-model)
(exit)

